:console_readLine
	set J, 3 ; Char address on the line
	; Initializing memory
	set X,0
	set B, pick 3
	int INT_INITMEM
	set B,pick 2
	int INT_INITMEM
	set B,pick 1
	int INT_INITMEM
	:console_readLine_loop
		int INT_WAITKEY_NOTBLOCKING ; Wait until a character is typed. It will be savec in C.
		ife C, 0
			set pc, console_readLine_loop
		set PC, console_processChar

:console_processChar
	ife C, KBD_RETURN ; Return
		set PC, console_processCommand
	ife C, KBD_BACKSPACE ; Backspace
		set PC, console_backspace
	ifg C,0x79
		ifl C,0x84
			set pc,console_arrows
	ife J, 32 ; If we are at the end of the line, we don't do anything.
		set PC, console_readLine_loop
	ifg C,0x7F
		set pc,console_readLine_loop
	; If none of the above conditions is met, then we display the char.
	;set I, SCREEN_HEIGHT ; We will display the character at the last line.
	int INT_PRINTC ; printc

	sub J, 3 ; We remove the two chars from J needed to display correctly on the screen

	;set [Z + J], C doesn't work, too many registers for DevCPU.
	add B, J
	set [B], C
	sub B, J

	add J, 4 ; Then we put those 2 chars plus another one since we just typed one
	set C,0x220
	int INT_PRINTC
	set PC, console_readLine_loop

:console_arrows_define
set X,J
add X,1
set pc,pop
:console_arrows
set A,C
sub J,3
add B,J
set C,[B]
ife C,0
	set C,0x20
sub B,J
add J,3
int INT_PRINTC
ifg J,X
	jsr console_arrows_define
ife A,KBD_ARROW_LEFT
	sub J,1
ife A,KBD_ARROW_RIGHT
	add J,1
ife J,X
	sub J,1
ife J,2
	add J,1
sub J,3
add B,J
set C,[B]
ife C,0
	set C,0x20
sub B,J
add J,3
set B,0x200
jsr lem1802_setColor
int INT_PRINTC
set B,0x2000
jsr lem1802_setColor
set B,pick 1
set pc,console_readLine_loop
:console_processCommand

	; --------------
	; Parse
	; --------------
	set C,0x20
	int INT_PRINTC ; We remoce the square at the end of the string

	; We peek I,J.
	set I, pick 1
	set J,pick 2
	; No space chars at the beggining!
	:console_processCommand_loop
		sti [J],[I]
		ifg [I], 0x21 ;If we find a space, \t or \n or \0, we exit the loop
			set PC, console_processCommand_loop

	:console_processCommand_endLoop
	add I, 1
	set J,pick 3
	set Z,I
	sub Z,pick 1
	ifg Z,0x30
		set pc,launcher ; We check there is no buffer overflow
	; We copy the args to Y
	:console_processCommand_loop2
		sti [J],[I]
		ifn [I], 0x0 ; We only want to stop if we are at the end, all arguments are in one string.
			set PC, console_processCommand_loop2
	; -------------------
	; Launcher
	; -------------------
	:launcher

	int INT_SCROLL ; In any case, we scroll
	set A, pick 2
	set I, 0

	:launch_loop
		set B, [txt_commands + I]
		; We compare the command in A and the one in B
		jsr strcmp

		;If it is the right command, we launch the corresponding routine savec in the pointer array.
		ife Z, 1
			set PC, console_launch

		add I, 1
		ifl I, [nb_commands]
			set PC, launch_loop



	; ----------------
	; Unknown command
	; ----------------

	int INT_GETCOLOR
	set PUSH, B ;We save the current color of the screen

	set B, 0x4000
	jsr lem1802_setColor

	int INT_SCROLL ; scroll

	set B, console_unknownCommand
	set I, SCREEN_HEIGHT
	set J, 1
	int INT_PRINTF ; printf

	; Displaying the command
	set J, 21
	set B, pick 3
	int INT_PRINTF

	int INT_SCROLL ; scroll

	set B, POP ; We restore the previously saved color
	jsr lem1802_setColor
	set PC, pop

:console_backspace
	ife J, 3
		set PC, console_readLine_loop
	set C,0x20
	int INT_PRINTC
	sub J, 2 ; set [Z + J] doesn't work, too many registers for DevCPU.
	add B, J ; So, we remove the two unallowed J chars and set the temp address to 0, we set Z normally then we add 1 to J
	set [B], 0
	sub B, J
	add J, 1
	set C, 0
	int INT_GETCOLOR
	set push,B
	set B,0x220
	jsr lem1802_setColor
	int INT_PRINTC ; We put a 0
	set B,pop
	jsr lem1802_setColor
	set B,pick 1
	set PC, console_readLine_loop


:console_launch
	set B, [ptr_commands + I]
	set push,console_endCommand
	set X,pick 3
	set Y,pick 4
	set I, SCREEN_HEIGHT
	set J, 1
	set PC, B

:console_endCommand
	int INT_SCROLL
	set PC, pop
