;--------------------------------------------------------
; Cette routine détecte et initialise les périphériques
; en appelant les sous-routines concernées.
;--------------------------------------------------------
:detection_and_init_periphs
	jsr push_regs
	hwn I
	set J, -1
	set PUSH, boucle_periph ; plus rapide et simple pour la suite
	:boucle_periph
		add J, 1
		ife I, J
			set PC, fin_boucle_periph
		hwq J

		ife A, MONITOR_ID_A
			ife B, MONITOR_ID_B
				set PC, hw_addScreen

		ife A, KEYBOARD_ID_A
			ife B, KEYBOARD_ID_B
				set PC, hw_addKeyboard

		ife A, CLOCK_ID_A
			ife B, CLOCK_ID_B
				set PC, hw_addClock

		ife A, FLOPPY_DRIVE_ID_A
			ife B, FLOPPY_DRIVE_ID_B
				set PC, hw_addFloppy
		
		ife A, SPED_ID_A
			ife B, SPED_ID_B
				set PC, hw_addSped

		set PC, PEEK ; le hw est inconnu, on l'ignore.
		
	:fin_boucle_periph
		set A, POP ; on vire le label sur la pile
		jsr init_periph
		jsr pop_regs
		set PC, POP

;----------------------------------------
;Initialisation des peripheriques détectés
;Appel à la routine contenue dans le drivers du periph
;Aucun reg modifié
;----------------------------------------

:init_periph
	ifn [nb_screens], 0
		jsr lem1802_init
	ifn [nb_keyboards], 0
		jsr init_keyboards
	ifn [nb_clocks], 0
		jsr init_clocks
	ifn [nb_floppies], 0
		jsr init_floppies
	ifn [nb_sped], 0
		jsr sped_reinit
	set PC, POP


;--------------------------------
;	Fonctions locales privées
;	Ne pas appeller ailleurs
;   Elles règlent les variables locales
;   de stockage d'id (dans driversData.dasm)
;   Elles utilisent J, qui contient l'id
;   du hw en détection.
;   Pour l'instant, 1 seul hw par type est supporté.
;--------------------------------
:hw_addScreen
	ife [nb_screens], SCREEN_NB_MAX ; ife car on n'a pas de >=
		set PC, PEEK ; trop de hw par rapport à ce qui est supporté
	add [nb_screens], 1
	ife [nb_screens], 1
		set [id_screen1], J
	ife [nb_screens], 2
		set [id_screen2], J
	set PC, PEEK


:hw_addKeyboard
	ife [nb_keyboards], KEYBOARD_NB_MAX
		set PC, PEEK
	add [nb_keyboards], 1
	ife [nb_keyboards], 1
		set [id_keyboard1], J
	set PC, PEEK


:hw_addClock
	ife [nb_clocks], CLOCK_NB_MAX
		set PC, PEEK
	add [nb_clocks], 1
	ife [nb_clocks], 1
		set [id_clock1], J
	set PC, PEEK


:hw_addFloppy
	ife [nb_floppies], FLOPPY_NB_MAX
		set PC, PEEK
	add [nb_floppies], 1
	ife [nb_floppies], 1
		set [id_floppy1], J
	set PC, PEEK
	
	
:hw_addSped
	ife [nb_sped], SPED_NB_MAX
		set PC, PEEK
	add [nb_sped], 1
	ife [nb_sped], 1
		set [id_sped], J
	set PC, PEEK