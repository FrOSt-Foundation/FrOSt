;This file is part of FrOSt.
;
;    FrOSt is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.

;    FrOSt is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with FrOSt.  If not, see <http://www.gnu.org/licenses/>.
;
; --------------------------------------------
; Title:   Interpreteur
; Author:  Administrateur
; Date:    13/05/2012
; Version: 
; --------------------------------------------


:init_interpreteur
set push , a
set push , z
set A , 50
JSR malloc
ife z , 0
	set pc , end_malloc
set [adr_interpreteur] , Z
add z , 3
set [parse_commande1] , z
add z , 10
set [parse_commande2] , z
add z , 10
set [parse_commande3] , z
add z , 10
set [parse_commande4] , z
add z , 10
set [parse_commande5] , z
set z , pop
set a , pop
set pc , pop

:interprete_commande
JSR parseur_commande
JSR interprete_parse
JSR efface_invite
JSR affiche_invite
set pc , pop



:parseur_commande
set push , b
set push , i
set push , x
set push , [parse_commande1]
set push , [parse_commande2]
set push , [parse_commande3]
set push , [parse_commande4]
set push , [parse_commande5]
set b , [VRAM1]
add b , 358
set i , [VRAM1]
add i , 383
set x , 1
:boucle_parseur
ife b , i
	set pc , fin_boucle_parseur
ife [b] , 0xF020
	set pc , saut_parseur
ife x , 6
	set pc , end_malloc
ife [b] , 0xF09F
	set pc , saut_parseur
JSR copie_parseur
add b , 1
set pc , boucle_parseur
:fin_boucle_parseur
set [parse_commande5] , pop
set [parse_commande4] , pop
set [parse_commande3] , pop
set [parse_commande2] , pop
set [parse_commande1] , pop
set x , pop
set i , pop
set b , pop
set pc , pop

:saut_parseur
add  x , 1
add b , 1
set pc , boucle_parseur


:copie_parseur
ife x , 1
	set pc , copie1
ife x , 2
	set pc , copie2
ife x , 3
	set pc , copie3
ife x , 4
	set pc , copie4
ife x , 5
	set pc , copie5

:copie1
set push , a
set a , [parse_commande1]
set [a] , [B]
add [parse_commande1] , 1
set a , pop
set pc , pop

:copie2
set push , a
set a , [parse_commande2]
set [a] , [B]
add [parse_commande2] , 1
set a , pop
set pc , pop

:copie3
set push , a
set a , [parse_commande3]
set [a] , [B]
add [parse_commande3] , 1
set a , pop
set pc , pop

:copie4
set push , a
set a , [parse_commande4]
set [parse_commande4] , [B]
add [parse_commande4] , 1
set a , pop
set pc , pop

:copie5
set push , a
set a , [parse_commande5]
set [parse_commande5] , [B]
add [parse_commande5] , 1
set a , pop
set pc , pop

:interprete_parse
set push , A
set push , B
set push , C
set push , Z
set A , [parse_commande1]
set B , commande_test
set C , 4
JSR strcmp
JSR launch_programme
JSR vider_parse
set Z , pop
set C , pop
set b , pop
set a , pop
set pc , pop

:vider_parse
set push , A
set push , I
:init_vide_parse1
set a , [parse_commande1]
set i , 0
:vide_parse1
ife i , 10 
	set pc , init_vide_parse2
set [A] , 0
add i , 1
add a , 1
set pc , vide_parse1
:init_vide_parse2
set a , [parse_commande2]
set i , 0
:vide_parse2
ife i , 10 
	set pc , init_vide_parse3
set [A] , 0
add i , 1
add a , 1
set pc , vide_parse2
:init_vide_parse3
set a , [parse_commande3]
set i , 0
:vide_parse3
ife i , 10 
	set pc , init_vide_parse4
set [A] , 0
add i , 1
add a , 1
set pc , vide_parse4
:init_vide_parse4
set a , [parse_commande4]
set i , 0
:vide_parse4
ife i , 10 
	set pc , init_vide_parse5
set [A] , 0
add i , 1
add a , 1
set pc , vide_parse4
:init_vide_parse5
set a , [parse_commande5]
set i , 0
:vide_parse5
ife i , 10 
	set pc , fin_vide_parse
set [A] , 0
add i , 1
add a , 1
set pc , vide_parse5
:fin_vide_parse
set i , pop
set a , pop
set pc , pop


