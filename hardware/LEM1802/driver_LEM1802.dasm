; --------------
;  lem1802_init
; --------------
; Description:
;     - Inits the LEM1802. Used by the hardware manager.
; Arguments:
;     - 
; Returns:
;     - 

:lem1802_init
	;Nothing to do, the IDs are already saved
	set PC, POP

; --------------
;  lem1802_resetFont
; --------------
; Description:
;     - Resets the font ram.
; Arguments:
;     - 
; Returns:
;     - 
:lem1802_resetFont
	set PUSH, A
	set PUSH, B

	set A, 1
	set B, lem1802_font_default
	hwi [id_screen1]

	set B, POP
	set A, POP
	set PC, POP

; -----------------
;  lem1802_setFont
; -----------------
; Description:
;     - Maps the font ram.
; Arguments:
;     - B: Pointer to the font ram to map
; Returns:
;     - 

:lem1802_setFont
	set PUSH, A
	
	set A, 1
	hwi [id_screen1]
	
	set A, POP
	set PC, POP

; --------------
;  lem1802_init
; --------------
; Description:
;     - Sets the color of the characters to write.
; Arguments:
;     - B: Color (unchecked by this routine).
; Returns:
;     - 

:lem1802_setColor
	set [screen_color], B
	
	set PC, POP

; --------------
;  lem1802_setPalette
; --------------
; Description:
;     - Maps the palette RAM
; Arguments:
;     - B: Pointer to the palette ram to map, or 0 to revert to the default palette.
; Returns:
;     - 

:lem1802_setPalette
	set PUSH, A
	
	set A, 2
	hwi [id_screen1]
	
	set A, POP
	set PC, POP

; --------------
;  lem1802_setBorder
; --------------
; Description:
;     - Sets the color of the border.
; Arguments:
;     - B: Color (0x0000 - 0x000F)
; Returns:
;     - 

:lem1802_setBorder
	set PUSH, A
	
	set A, 3
	hwi [id_screen1]
	
	set A, POP
	set PC, POP

; --------------
;  lem1802_setVram
; --------------
; Description:
;     - Maps the VRAM.
; Arguments:
;     - B: Pointer to VRAM
; Returns:
;     - 

:lem1802_setVram
	set [active_screen], B
	
	set PC, lem1802_updateVram

; --------------
;  lem1802_getFont
; --------------
; Description:
;     - Copies the font to a new allocated RAM block.
; Arguments:
;     - 
; Returns:
;     - Z: The address of the RAM block containing the font, or MALLOC_ERROR (use IF_MALLOC_ERROR to check)

:lem1802_getFont
	set PUSH, A
	
	set A, 256
	jsr malloc
	IF_MALLOC_ERROR
		set PC, lem1802_getFont_end

	set A, 4
	set B, Z
	hwi [id_screen1]
	:lem1802_getFont_end
	
	set A, POP
	set PC, POP

; --------------
;  lem1802_getPalette
; --------------
; Description:
;     - Copies the palette to a new allocated RAM block.
; Arguments:
;     - 
; Returns:
;     - Z: The address of the RAM block containing the font, or MALLOC_ERROR (use IF_MALLOC_ERROR to check)

:lem1802_getPalette
	set PUSH,A
	
	set A, 16
	jsr malloc
	IF_MALLOC_ERROR
		set PC, lem1802_getPalette_end

	set A, 5
	set B, Z
	hwi [id_screen1]
	:lem1802_getPalette_end
	
	set A, POP
	set PC, POP

; --------------
;  lem1802_getVram
; --------------
; Description:
;     - Get the VRAM location.
; Arguments:
;     - 
; Returns:
;     - Z: Pointer to VRAM

:lem1802_getVram
	set Z, [active_screen]
	
	set PC, POP

; --------------
;  INTERNAL ROUTINE - DO NOT USE
; --------------

:lem1802_updateVram
	set PUSH, A
	set PUSH, B
	
	set A, 0
	set B, [active_screen]
	hwi [id_screen1]
	
	set B, POP
	set A, POP
	set PC, POP

; --------------
;  lem1802_displayFrOStLogo
; --------------
; Description:
;     - Displays the FrOSt logo.
; Arguments:
;     - 
; Returns:
;     - 

:lem1802_displayFrOStLogo
	set PUSH, A
	set PUSH, B
	set PUSH, I
	set PUSH, J

	jsr lem1802_clear
	set B, lem1802_FrOStLogo_font
	jsr lem1802_setFont
	
	set B, 3
	jsr lem1802_setBorder

	set I, lem1802_FrOStLogo
	set J, [active_screen]
	add J, 137
	set A, 0
	:lem1802_displayFrOStLogo_loop1
		sti [J], [I]
		add A, 1
		ife A, 16
			set A, 0
		ifn I, lem1802_FrOStLogo_end
			set PC, lem1802_displayFrOStLogo_loop1
	
	; Wait for a while before making the logo disappear
	set A, 0
	:lem1802_displayFrOStLogo_loop2
		add A, 1
		ifn A, 0xFFFF ;TODO: Tweak it when we know the monitor startup time
			set PC, lem1802_displayFrOStLogo_loop2
			
	set B, 0
	jsr lem1802_setFont
	jsr lem1802_setBorder

	set J, POP
	set I, POP
	set B, POP
	set A, POP
	set PC, POP

; --------------
;  lem1802_clearLine
; --------------
; Description:
;     - Clears line on screen.
; Arguments:
;     - I: Line to clear (if I > 12, then clearing line 12).
; Returns:
;     - 

:lem1802_clearLine
	set PUSH, I
	set PUSH, J
	
	ifg I, SCREEN_HEIGHT
		set I, SCREEN_HEIGHT
	sub I, 1
	mul I, SCREEN_WIDTH
	add I, [active_screen]
	set J, 0
	:lem1802_clearLine_loop0
		sti [I],0
		ifn J, SCREEN_WIDTH
			set PC, lem1802_clearLine_loop0

	set J, POP
	set I, POP
	set PC, POP

; --------------
;  lem1802_scroll
; --------------
; Description:
;     - Everything goes up by one line, clears the last line.
; Arguments:
;     - 
; Returns:
;     - 
:lem1802_scroll
	set PUSH, A
	set PUSH, B
	set PUSH, C
	set PUSH, I
	
	set A, [active_screen]
	set B, A
	add B, SCREEN_WIDTH
	set C, SCREEN_SIZE
	sub C, SCREEN_WIDTH
	jsr memcpy
	set I, 12
	jsr lem1802_clearLine
	
	set I, POP
	set C, POP
	set B, POP
	set A, POP
	set PC, POP

; --------------
;  lem1802_printf
; --------------
; Description:
;     - Writes a formatted string to the screen.
; Arguments:
;     - A: Pointer to null-terminated string.
;     - I: Row (1 < I < 12).
;     - J: Column (1 < J < 32).
; Returns:
;     - 

:lem1802_printf
	set PUSH, B
	set PUSH, X
	set PUSH, Y
	set PUSH, I
	set PUSH, J
	ife [A], 0
		set PC, lem1802_printf_end
	ifl I, 1
		set I, 1
	ifg I, SCREEN_HEIGHT
		set I, SCREEN_HEIGHT
	ifl J, 1
		set J, 1
	ifg J, SCREEN_WIDTH
		set J, SCREEN_WIDTH
	sub I, 1
	sub J, 1
	mul I, SCREEN_WIDTH
	add I, J
	add I, [active_screen]
	set J, A
	set Y, SCREEN_SIZE
	add Y, [active_screen]
	:lem1802_printf_loop0
		set B, [J]
		ife I, Y
			jsr lem1802_printf_scroll
		ifl B, 0x20
			set PC, lem1802_printf_selection
		bor B, [screen_color]
		sti [I], B
		ifn [J], 0
			set PC, lem1802_printf_loop0
			
	:lem1802_printf_end
	set J, POP
	set I, POP
	set Y, POP
	set X, POP
	set B, POP
	set pc, POP
		
:lem1802_printf_selection
	ife B, 0x11
		set PC, lem1802_printf_return
	ife B, 0x1F
		set PC, lem1802_printf_tab
	add J, 1
	set PC, lem1802_printf_loop0

:lem1802_printf_scroll
	jsr lem1802_scroll
	sub I, SCREEN_WIDTH
	set PC, POP

:lem1802_printf_return
	set X, I
	sub X, [active_screen]
	mod X, SCREEN_WIDTH
	add I, SCREEN_WIDTH
	sub I, X
	add J, 1
	ifl I, Y
		ifn I, Y
			set PC, lem1802_printf_loop0
	jsr lem1802_scroll
	sub I, SCREEN_WIDTH
	
	set PC, lem1802_printf_loop0

:lem1802_printf_tab
	add I, 3
	add J, 1
	ifl I, Y
		ifn I, Y
			set PC, lem1802_printf_loop0
	jsr lem1802_scroll
	sub I, SCREEN_WIDTH
	
	set PC, lem1802_printf_loop0

; --------------
;  lem1802_clear
; --------------
; Description:
;     - Clears the screen.
; Arguments:
;     - 
; Returns:
;     - 

:lem1802_clear
	set PUSH, A

	set A, [active_screen]
	jsr clear_memory

	set A, POP
	set PC, POP

; --------------
;  lem1802_printc
; --------------
; Description:
;     - Writes a char.
; Arguments:
;     - C: char
;     - I: Line (1 < I < 12)
;     - J: Column (1 < J < 32)
; Returns:
;     - 

:lem1802_printc
	set PUSH, I
	set PUSH, J
	set PUSH, C
	
	ifl I, 1
		set I, 1
	ifg I, SCREEN_HEIGHT
		set I, SCREEN_HEIGHT
	ifl J, 1
		set J, 1
	ifg J, SCREEN_WIDTH
		set J, SCREEN_WIDTH
	sub I, 1
	sub J, 1
	mul I, SCREEN_WIDTH
	add I, J
	add I, [active_screen]
	bor C, [screen_color]
	set [I], C
	
	set C, POP
	set J, POP
	set I, POP
	set PC, POP

; --------------
;  lem1802_init
; --------------
; Description:
;     - Quickly writes an unformatted string.
; Arguments:
;     - B: Pointer to the string
;     - I: Pointer to VRAM address to write to
; Returns:
;     - 

:lem1802_puts
	set PUSH, C
	set PUSH, I
	set PUSH, J
	
	set C, [screen_color]
	add I, [active_screen]
	set J, B
	:lem1802_puts_loop0
		bor [J], C
		sti [I], [J]
		ifn [J], 0
			set PC, lem1802_puts_loop0
			
	set J, POP
	set I, POP
	set C, POP
	set PC, POP
