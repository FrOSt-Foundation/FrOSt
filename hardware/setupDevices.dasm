; ------------
;  malloc
; ------------
; Description:
;     - Detects and initilizes all known peripherals by calling appropriate subroutines.
; Arguments:
;     - 
; Returns:
;     - 

:setup_devices
	jsr push_regs
	hwn I
	set J, -1
	set PUSH, loop_periph ; Faster and simpler for later
	:loop_periph
		add J, 1
		ife I, J
			set PC, end_loop_periph
		hwq J
		
		ife A, IACM_ID_A
			ife B, IACM_ID_B
				set PC, hw_addIACM

		ife A, MONITOR_ID_A
			ife B, MONITOR_ID_B
				set PC, hw_addScreen

		ife A, KEYBOARD_ID_A
			ife B, KEYBOARD_ID_B
				set PC, hw_addKeyboard

		ife A, CLOCK_ID_A
			ife B, CLOCK_ID_B
				set PC, hw_addClock

		ife A, FLOPPY_DRIVE_ID_A
			ife B, FLOPPY_DRIVE_ID_B
				set PC, hw_addFloppyDrive
		
		ife A, HARD_DRIVE_ID_A
			ife B, HARD_DRIVE_ID_B
				set PC, hw_addHardDrive

		set PC, PEEK ; The device is unknown, we ignore it.
		
	:end_loop_periph
		set A, POP ; We remove the label on the stack
		jsr init_periphs
		jsr pop_regs
		set PC, POP

; --------------
;  init_periphs
; --------------
; Description:
;     - Initializes detected devices and calls the corresponding routines. No register changed.
; Arguments:
;     - 
; Returns:
;     - 

:init_periphs
	ifn [nb_IACMs], 0
		jsr IACM_init
	ifn [nb_screens], 0
		jsr lem1802_init
	ifn [nb_keyboards], 0
		jsr keyboard_init
	ifn [nb_clocks], 0
		jsr clock_init
	ifn [nb_floppies], 0
		jsr init_floppies
	set PC, POP

; ========================================
;  PRIVATE FONCTIONS
;  DO NOT CALL FROM ANYWHERE ELSE
;  
;  Sets local variables of storage and ID
; ========================================

:hw_addIACM
	ife [nb_IACMs], IACM_NB_MAX
		set PC, PEEK
	set [nb_IACMs], 1
	set [id_IACM], J
	set PC, PEEK

:hw_addScreen
	ife [nb_screens], SCREEN_NB_MAX ; IFE because we don't have ">="
		set PC, PEEK ; Too many devices
	add [nb_screens], 1
	ife [nb_screens], 1
		set [id_screen1], J
	ife [nb_screens], 2
		set [id_screen2], J
	set PC, PEEK


:hw_addKeyboard
	ife [nb_keyboards], KEYBOARD_NB_MAX
		set PC, PEEK
	add [nb_keyboards], 1
	ife [nb_keyboards], 1
		set [id_keyboard1], J
	set PC, PEEK


:hw_addClock
	ife [nb_clocks], CLOCK_NB_MAX
		set PC, PEEK
	add [nb_clocks], 1
	ife [nb_clocks], 1
		set [id_clock1], J
	set PC, PEEK


:hw_addFloppyDrive
	ife [nb_floppies], FLOPPY_NB_MAX
		set PC, PEEK
	add [nb_floppies], 1
	ife [nb_floppies], 1
		set [id_floppy1], J
	ife [nb_floppies], 2
		set [id_floppy2], J
	ife [nb_floppies], 3
		set [id_floppy3], J
	ife [nb_floppies], 4
		set [id_floppy4], J
	set PC, PEEK

; We add the hard drive as a floppy because the only functional difference with a floppy is the spinning mechanism, which we already take care of now.
; A rewrite will be needed if we want to spin the drive up and down anywhere else though...
:hw_addHardDrive
	ife [nb_floppies], FLOPPY_NB_MAX
		set PC, PEEK
	add [nb_floppies], 1
	ife [nb_floppies], 1
		set [id_floppy1], J
	ife [nb_floppies], 2
		set [id_floppy2], J
	ife [nb_floppies], 3
		set [id_floppy3], J
	ife [nb_floppies], 4
		set [id_floppy4], J
	
	;SPIN_UP
	set PUSH, A
	set A, 0x0004
	hwi [id_floppy1]
	set A, POP
	
	set PC, PEEK
