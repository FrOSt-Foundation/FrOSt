;---------------------------------------------
;DAT CONSOLE
;---------------------------------------------
:invite_FrSH dat "FrSH>",0
:pos_curseur dat 6
:curseur_FrSH dat 0x9F




;---------------------------------------------
;PROGRAMME CONSOLE
;---------------------------------------------
:Console
dat "Console",0
int 0x2004 ;clear screen
set B , 0x2000
int 0x2000 ;change color
set B , message_bienvenue
set I , 1
set J , 1
int 0x1000
JSR affiche_invite
JSR affiche_curseur
.bouclePrinc
int 0x4000
jsr console_traiter_caractere
set pc,bouclePrinc

:affiche_invite
set B , invite_FrSH
set i , [ecran_h]
set j , 1
int 0x1000 ;printf
set pc , pop

:affiche_curseur
set C , [curseur_FrSH]
set i , [ecran_h]
set j , [pos_curseur]
MOD j , [ecran_w]
int 0x1001 ;printc
set pc , pop

:efface_curseur
set C , 0
int 0x2003
set A,B
set B,0
int 0x2000
set i , [ecran_h]
set j , [pos_curseur]
MOD j , [ecran_w]
int 0x1001 ;printc
set B,A
int 0x2000
set pc , pop



:console_traiter_caractere
ifl C,0x80
	ifg C,0x19
		set pc,affiche_caractere
ife C , 0x10
	set pc,efface_caractere
ife C , 0x11
	set pc,valide_commande
set pc,pop


:affiche_caractere
ife [pos_curseur] , 31
	set pc , pop
set i , 12
set j , [pos_curseur]
int 0x1001 ;printc
add [pos_curseur] , 1
JSR affiche_curseur
set pc , pop

:efface_caractere
ife [pos_curseur] , 6
	set pc , pop
set i , [ecran_h]
set j , [pos_curseur]
set C,0
int 0x2003
set A,B
set B,0
int 0x2000
int 0x1001 ;printc
set B,A
int 0x2000
sub [pos_curseur] , 1
JSR affiche_curseur
set pc , pop


:valide_commande
jsr efface_curseur
JSR interprete_commande
int 0x2001
JSR affiche_invite
set [pos_curseur] , 6
JSR affiche_curseur
JSR vider_parse
set pc , pop
