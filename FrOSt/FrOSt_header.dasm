; This file is a BOLD and BBOS compliant header tasked with bootloading the OS from disk.
; At this point, A means we load from the Ath disk.
; This file is a fork of bold_header.dasm from https://github.com/azertyfun/BOLD

.magic 0x1FD 01
.magic 0x1FE 0xB
.magic 0x1FF 0x55AA

.define LOADER_LOCATION 0xE000
.define READ_LOCATION 0xA000
.define LENGTH_LOCATION 0x1FE
.define FONT_LOCATION 0xF000

set PUSH, A

set [os_length_plus_one], [LENGTH_LOCATION]
add [os_length_plus_one], 1

set A, loader
set B, loader_end
set C, LOADER_LOCATION
jsr memcpy

set A, frOStLogo_font
set B, frOStLogo_font_end
set C, FONT_LOCATION
jsr memcpy

jsr detectPeriphs

set A, 0
set B, 0x8000
hwi [monitor] ;Mapping monitor

jsr clear

jsr displayLogo

set X, 1
set Y, READ_LOCATION
set I, POP
:copy_loop
    set A, 2
    hwi [drives + I]

    jsr loadFloppy_waitFinish

    add X, 1
    add Y, 0x200
    ifn X, [os_length_plus_one]
        set PC, copy_loop

;jsr removeLogo

set Y, READ_LOCATION
set Z, READ_LOCATION
set A, [LENGTH_LOCATION] ; OS length
mul A, 0x200
add Z, A

set I, 0
set X, [monitor]
set PC, LOADER_LOCATION

:displayLogo
    set A, 1
    set B, FONT_LOCATION
    hwi [monitor]
    set A, 3
    set B, 3
    hwi [monitor]

    set I, frOStLogo
	set J, 0x8089
	set A, 0
	:displayFrOStLogo_loop1
		sti [J], [I]
		add A, 1
		ife A, 16
			set A, 0
		ifn I, frOStLogo_end
			set PC, displayFrOStLogo_loop1

    set PC, POP

; Loads a program from Y to Z at address 0
; I must be 0
; X must be monitor id
:loader

    :loader_loop0
        sti [I], [Y]
        add Y, 1
        ifn Y, Z
            set PC, LOADER_LOCATION ;Let's go back to the loop (can't use loader_loop0 because the address changes while copying lodaer)

    :loader_clearRam_continue

    ; Reset font and border used for logo
    set A, 1
    set B, 0
    hwi X
    set A, 3
    set B, 0
    hwi X

    ; Clear screen
    set I, 0x8000
    sti [I], 0
    ifn I, 0x8180
        sub PC, 4

    set A, 0
    set B, 0
    set C, 0
    set X, 0
    set Y, 0
    set Z, 0
    set I, 0
    set J, 0
    set EX, 0

    set PC, 0

:loader_end

:loading_str DAT "Loading the OS from disk...", 0

:frOStLogo dat 0x0100 0x0100 0xF101 0xB102 0xB103 0xF104 0xF105 0xF106 0xF107 0xB108 0xB109 0xB103 0x0100 0x0100 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0xF10A 0xF10B 0x0F00 0xBF0C 0xBF0D 0xBF0E 0xFB0F 0x0F00 0xFB0D 0xBF10 0x0B00 0xB111 0xB112 0xB113 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0F00 0x0F00 0x0F00 0x0F00 0xBF14 0x3B15 0x3F16 0x3F17 0x3F18 0x3B0D 0xB319 0x0B00 0x0B00 0x0B00 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x1920 0x9320 0x3B20 0xBF20 0x1F1A 0x9F1B 0x1F1C 0x9F1D 0x1F1E 0x9F1F 0xBF21 0x3B21 0x9321 0x1921
:frOStLogo_end
:frOStLogo_font dat 0x0000 0x0000 0x0080 0xC0C0 0xE0E0 0xC080 0x8000 0x0000 0x8080 0x8080 0x80C0 0xC0C0 0xE0E0 0xF0F0 0xF8FE 0xFEFE 0xFEFC 0xFCF8 0xF8F0 0xE0C0 0xF8F8 0xFCFC 0xFEFE 0xFEFF 0x0003 0x0F3F 0xFFFF 0xFFFE 0xFCF8 0xF0E0 0x3F7F 0xFFFF 0x83DF 0xFFFF 0xFFFE 0xFEFC 0xF8F8 0xF8F0 0xF0F0 0xF0E0 0x0003 0x030F 0x0000 0x80FE 0xFFFF 0xFEFC 0xF0F0 0xE0C0 0xE0E0 0xF0FC 0x030F 0x1F7F 0x0000 0x7C14 0x0400 0x7808 0x1000 0x7E42 0x427E 0x004E 0x4A7A 0x003C 0x4820 0x0000 0xFF55 0xFFAA 0xAAFF 0x55FF
:frOStLogo_font_end

:os_length_plus_one dat 0

;;;FONCTION write (0x1)
;;;DESCRIPTION Writes the text in arguments
;;;ARG B Address of the string
;;;ARG I Where to write (begins at 0x8000)
;;;If Z = 0xABAB, then writing in highlighted mode.
:write
	set PUSH, I
	:write_loop0
		set [I], [B]
		ifn Z, 0xABAB
			bor [I], [color]
		ife Z, 0xABAB
			bor [I], [color_hl]
		add I, 1
		add B, 1
		ifn [B], 0
			set PC, write_loop0

	set I, POP
	set PC, POP

:detectPeriphs
	HWN I
	SET J, 0
	:detectPeriphs_loop
		HWQ J
		IFE A, 0xf615
			IFE B, 0x7349
				SET [monitor], J
		IFE A, 0x7406
			IFE B, 0x30CF
				SET [keyboard], J
		IFE A, 0x24C5
			IFE B, 0x4FD5
				JSR detectPeriphs_addFloppy
		IFE A, 0x525D
			IFE B, 0x4AC5
				JSR detectPeriphs_addFloppy
		ADD J, 1
		IFN J, I
			SET PC, detectPeriphs_loop

	SET PC, POP

	:detectPeriphs_addFloppy
		set A, 0
		hwi J
		IFE B, 0 ; STATE_NO_MEDIA
			set PC, POP

		SET A, [n_drives]
		ifl A, 6
			SET [drives + A], J
		ADD [n_drives], 1

		SET PC, POP

; =============
; Waits until disk operation finished
; I for the Ith floppy drive
; =============
:loadFloppy_waitFinish
	set A, 0
	:loadFloppy_waitFinish_loop0
		hwi [drives + I]
		ife B, 0x0003 ;If STATE_BUSY
		set PC, loadFloppy_waitFinish_loop0
	set PC, POP

:clear
	set PUSH, I
	SET I, 0x8000
	:clear_loop
		SET [I], 0
		ADD I, 1
		IFN I, 0x8180
			set PC, clear_loop
	SET I, POP
	set PC, POP

; =======================
; A : Start
; B : End
; C : Address to copy to
; =======================

:memcpy
	set [C], [A]
	add A, 1
	add C, 1
	ifn A, B
		set PC, memcpy
	set PC, POP

:monitor DAT 0
:keyboard DAT 0
:drives DAT 0, 0, 0, 0, 0, 0
:n_drives DAT 0

:color DAT 0xF000
:color_hl DAT 0x0F00

:BOLD_end
