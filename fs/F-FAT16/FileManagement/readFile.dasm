; *************************
; Project: FrOSt
; File: readFile.dasm
; *************************

; ====================
; Error codes
; ------------
; See wiki
; ====================

; ================================
; FFAT16_readFile
;
; Lit le contenu d'un fichier.
; Si taille du fichier > freemem/2 :
; Impossible de lire.
;
; Arguments
; ---------
; Y : Le nom de fichier
;
; Return
; ------
; EX : Error code
; Z : Pointeur vers le contenu du fichier alloué en RAM.
; ================================

:FFAT16_readFile
	set EX, 0
	ife 0, [FFAT16_valid]
		set EX, 0x0001
	ifn EX, 0
		set PC, POP

	set PUSH, A
	set PUSH, B
	set PUSH, C
	set PUSH, I
	set PUSH, J
	set PUSH, X
	set PUSH, Y

	set B, Y
	jsr FFAT16_getFileByName ;Ce qui nous intéresse, c'est le secteur X (Xe entrée FAT)
	ifn EX, 0
		set PC, FFAT16_readFile_break0
	set X, Y
	set Y, Z

	set A, [free_mem]
	div A, 2
	ifg Y, A
		set PC, FFAT16_readFile_break0

	set B, 512
	mul B, X
	int INT_MALLOC
	 ife Z, MALLOC_ERROR
		set EX, 0x0003
	ifn EX, 0
		set PC, FFAT16_readFile_break0

	; Désormais :
	; X = Le nombre de clusters
	; Y = Le cluster de début
	; Z = Adresse de la mémoire allouée (512 * nb de clusters)

	set PUSH, Z
	set PUSH, X
	set I, 0
		:FFAT16_readFile_loop0
			set PUSH, Y
			set PUSH, X
				set A, 2
				set X, Y
				add X, I
				set Y, Z
				hwi [id_floppy1] ;On n'utilise pas FFAT16_readSector car on ne veut pas allouer de la mémoire, juste écrire dans de la mémoire déjà allouée.
				ifn B, 1
					set EX, 0x0004
				ifn EX, 0
					set PC, FFAT16_readFile_error0
				jsr FFAT16_waitFinish
			set X, POP
			set Y, POP
			add I, 1
			add Z, 512
			ifn I, PEEK
				set PC, FFAT16_readFile_loop0
	set X, POP
	set Z, POP

	:FFAT16_readFile_break0
	set Y, POP
	set X, POP
	set J, POP
	set I, POP
	set C, POP
	set B, POP
	set A, POP

	set PC, POP

:FFAT16_readFile_error0
	set X, POP
	set Y, POP
	set X, POP
	set Z, POP
	set PC, FFAT16_readFile_break0
