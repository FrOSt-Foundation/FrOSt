; *************************
; Project: FrOSt
; File: newFile.dasm
; *************************

; ================================
; FFAT16_newFile
; 
; Arguments
; ---------
; B : Taille (en secteurs) du fichier
; C : Pointeur vers le nom de fichier
;
; Return
; ------
; EX : Error code
; ================================

; ====================
; Error codes
; ------------
; Voir wiki github
; ====================

:FFAT16_newFile
	set EX, 0
	IF_FALSE [FFAT16_valid]
		set EX, 1
	ife EX, 1
		set PC, POP
	jsr push_regs
	set X, 1
	jsr FFAT16_readSector
	
	jsr FFAT16_waitFinish
	
	jsr FFAT16_findFirstFreeFATEntry
	ife EX, 0x0007
		set PC, FFAT16_newFile_error
	
	set PUSH, B
	
	;X est désormais la première entrée libre et Y le premier secteur libre.
	set [X], B
	add X, 1
	set [X], Y
	add X, 1
	
	jsr FFAT16_formatFileName
	
	set PUSH, X
	set PUSH, Y
	set PUSH, Z
	
	;Ici, on peut écrire le secteur en Z sur la FAT, il est censé être bien formé.
	set A, 3
	set X, 1
	set Y, Z
	
	hwi [id_floppy1]
	ifn B, 1 ;If error
		set PC, FFAT16_newFile_error2
	jsr FFAT16_waitFinish
	
	set Z, POP
	set Y, POP
	set X, POP
	set B, POP

	set PUSH, Z
		;Il faut désormais effacer le contenu de(s) secteur(s)
		set I, 0
		:FFAT16_newFile_loop0
			set J, 0
			:FFAT16_newFile_loop1
				set [Z], 0
				add J, 1
				add Z, 1
				ifn J, 512
					set PC, FFAT16_newFile_loop1
			set Z, PEEK
			set PUSH, X
			set PUSH, Y
				set X, Y
				set Y, Z
				jsr FFAT16_writeSector
				jsr FFAT16_waitFinish
			set Y, POP
			set X, POP
			add Y, 1
			add I, 1
			ifn I, B
				set PC, FFAT16_newFile_loop0
	set B, POP
	int INT_FREE
	
	jsr pop_regs
	set PC, POP

:FFAT16_newFile_error2
	set B, POP
	set Z, POP
	set Y, POP
	set X, POP
	set B, Z
	set EX, 0x0004
	int INT_FREE
	jsr pop_regs
	set PC, POP
:FFAT16_newFile_mallocError
	set EX, 0x0003
:FFAT16_newFile_error
	jsr pop_regs
	set PC, POP
