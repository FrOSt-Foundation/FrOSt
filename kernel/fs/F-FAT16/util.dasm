; =====================
; FFAT16_waitFinish
; Waits for the disk to finish its current operation (read/write)
; =====================

:FFAT16_waitFinish
	set PUSH, A
	set PUSH, B
	set PUSH, C
	set A, 0
	:FFAT16_waitFinish_loop0
		hwi [id_floppy1]
		ife B, 0x0003 ;If STATE_BUSY
		set PC, FFAT16_waitFinish_loop0
	set C, POP
	set B, POP
	set A, POP
	set PC, POP

; =====================
; FFAT16_getName
; Returns a pointer to the disk name in Z
; =====================
:FFAT16_getName
	set Z, volumeName
	set PC, POP

; =====================
; FFAT16_getSerialNumber
; Returns in Z a pointer to the S/N (two words)
; =====================
:FFAT16_getSerialNumber
	set Z, serialNumber
	set PC, POP

; =====================
; FFAT16_formatFileName
; Copies *C to *X (14 characters, right-padded with spaces).
; =====================
; Algorithm :
; for(I = 0; I != 14; I++) {
; 	if(C != 0)
; 		[X] = [C];
; 	else
; 		[X] = ' ';
; 	X++;
;	if(C != 0)
; 		C++;
; }
:FFAT16_formatFileName
	set PUSH, I
	set PUSH, X
	set PUSH, C
	set I, 0
	:FFAT16_formatFileName_loop0
		ifn [C], 0
			set [X], [C]
		ife [C], 0
			set [X], 0x20
		add X, 1
		ifn [C], 0
			add C, 1
		add I, 1
		ifn I, 14
			set PC, FFAT16_formatFileName_loop0
	set C, POP
	set X, POP
	set I, POP
	set PC, POP

; Returns the first free FAT entry in X and the first free sector in Y
; Z must be the address to the sector loaded in the RAM
:FFAT16_findFirstFreeFATEntry
	set PUSH, A
	set PUSH, B
	set PUSH, C
	set PUSH, I
	set PUSH, J

	set X, Z
	set J, 496
	add J, Z
	:FFAT16_findFirstFreeFATEntry_loop0
		ife [X], 0
			set PC, FFAT16_findFirstFreeFATEntry_break0
		ifg X, J
			set PC, FFAT16_findFirstFreeFATEntry_break0
		add X, 16
		set PC, FFAT16_findFirstFreeFATEntry_loop0

	:FFAT16_findFirstFreeFATEntry_break0
	ifg X, 496
		set EX, 0x0007

	; We search for the first free sector
	; Algorithm :
	; ------------
	; for(Y = 1; Y < 1440; ++Y) {
	; 	for(J = Z + 1; J < Z + 511; J += 16) {
	; 		if([J] == Y)
	;			// Goto the beggining of the first for
	;		else {
	;			if([J] + [J-1] > Y && Y > [J]) // If we are between the first and last sector of a file, it's not free even if not explicitely stated.
	;				// Goto the beggining of the first for
	; 		}
	; 	}
	; }
	set Y, 1
	set A, Z
	add A, 511 ; A = (Z + 511)
	:FFAT16_findFirstFreeFATEntry_loop1
		add Y, 1
		set J, Z
		add J, 1
		:FFAT16_findFirstFreeFATEntry_loop2
			ife [J], Y
				set PC, FFAT16_findFirstFreeFATEntry_loop1

			set B, [J]
			sub J, 1
			add B, [J]
			add J, 1 ;B = [J] + [J + 1]

			ifg B, Y
				ifg Y, [J]
					set PC, FFAT16_findFirstFreeFATEntry_loop1

			add J, 16
			ifl J, A
				set PC, FFAT16_findFirstFreeFATEntry_loop2
	;TROUVÃ‰ !
	set J, POP
	set I, POP
	set C, POP
	set B, POP
	set A, POP

	set PC, POP

; Reads the Xth sector and returns a dynamically allocated block of RAM in Z.
; DON'T FORGET TO FREE Z
:FFAT16_readSector
	set PUSH, A
	set PUSH, B
	set PUSH, Y
	set EX, 0
	set B, 512
	int INT_MALLOC
	 ife Z, MALLOC_ERROR
		set PC, FFAT16_readSector_error0

	set A, 2
	set Y, Z
	hwi [id_floppy1]
	ifn B, 1 ;Si erreur
		set PC, FFAT16_readSector_error1

	:FFAT16_readSector_end
	set Y, POP
	set B, POP
	set A, POP
	set PC, POP

	:FFAT16_ReadSector_error0
		set EX, 0x0003
		set PC, FFAT16_readSector_end

	:FFAT16_ReadSector_error1
		set EX, 0x0004
		set PC, FFAT16_readSector_end

; Writes the Xth sector to what's in RAM at *Y
:FFAT16_writeSector
	set PUSH, A
	set PUSH, B
	set PUSH, Y

	set EX, 0
	set A, 3
	hwi [id_floppy1]

	ifn B, 1 ;If error
		set EX, 0x0004

	set Y, POP
	set B, POP
	set A, POP
	set PC, POP


; Returns in Y the number of files. Z = Pointer to the FAT sector.
; /!\ Modifies the I and J registers /!\
; /!\ Doesn't wait for the read to finish /!\
:FFAT16_getFilesNumber
	set I, Z
	set J, 0
	:FFAT16_getFilesNumber_loop0
		ifn [I], 0
			add J, 1
		add I, 16
		ifn [I], 0
			jsr FFAT16_getFilesNumber_loop0
	set Y, J
	set PC, POP
