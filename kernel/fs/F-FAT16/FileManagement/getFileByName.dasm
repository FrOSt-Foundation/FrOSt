; --------------
;  FFAT16_getFileByName
; --------------
; Description:
;     - Gets file information from file name.
; Arguments:
;     - B: Pointer to file name.
; Returns:
;     - EX: 0 if no error, else error code
;     - X: The file seeked is the Xth FAT entry
;     - Y: The length of the file in sectors
;     - Z: The first sector of the file

:FFAT16_getFileByName
	set EX, 0
	ife 0, [FFAT16_valid]
		set EX, 0x0001
	ife EX, 0x0001
		set PC, POP

	set PUSH, A
	set PUSH, B
	set PUSH, C
	set PUSH, I
	set PUSH, J

	set PUSH, B

	set B, 15
	int INT_MALLOC
	 ife Z, MALLOC_ERROR
		set PC, FFAT16_getFileByName_error0

	set X, Z ; We want to save Z in X because we'll need to memory emplacements to compare strings, and one for the FAT

	add Z, 14
	set [Z], 0 ; We add the null terminator

	set B, 15
	int INT_MALLOC
	 ife Z, MALLOC_ERROR
		set PC, FFAT16_getFileByName_error0

	set Y, Z

	; We add the null terminator
	add Z, 14
	set [Z], 0

	set B, POP

	set PUSH, X
		set C, B
		jsr FFAT16_formatFileName ; We transform the filename to a FFAT16 compatible one.
		set X, 1
		jsr dd_readSector
		jsr dd_waitForOperation
	set X, POP

	set PUSH, Y
		jsr FFAT16_getFilesNumber
		set J, Y
	set Y, POP

	ife J, 0
		set PC, FFAT16_getFileByName_error2

	; At this point:
	; J = Number of files
	; X = formatted string argument
	; Y = Place to compare strings
	; Z = FAT sector

	; Now, we will compare FAT entries one by one to our filename to get the corresponding entry.
	;
	; Algorithm in pseudo C-code :
	; ------------
	; Z += 2;
	; for(I = 0; I <= J; I++) {
	; 	memcpy(Z, Y, 14);
	; 	Z += 16;
	;	if(strcmp(X, Y) != 0)
	; 		//Exit loop
	; }
	; if(I > J)
	; 	// File does not exist, we quit with EX = 0x0008
	; // Seeked file is X-th file
	set PUSH, Z
	add Z, 2
	set I, 0
	add J, 1 ; We don't have <=, so we add 1 for a nice trick
	:FFAT16_getFileByName_loop0
		set B, Z
		set A ,Y
		set C, 14
		jsr memcpy
		set PUSH, Z
			set A, X
			set B, Y
			jsr strcmp
		set B, Z
		set Z, POP
		add I, 1
		ifn B, 0 ; If comparison is true
			set PC, FFAT16_getFileByName_break0

		add Z, 16
		ifl I, J
			set PC, FFAT16_getFileByName_loop0

		:FFAT16_getFileByName_break0
		sub J, 1 ; We reset J (we added one before)
		ifg I, J
			set PC, FFAT16_getFileByName_error1

	:FFAT16_getFileByName_end
	; We free all memory
	set Z, POP
	set B, Z
	int INT_FREE
	set B, X
	int INT_FREE
	set B, Y
	int INT_FREE

	set X, I

	sub I, 1
	mul I, 16
	add I, Z ; We find the FAT entry (I * 16 + offset)

	set Y, [I]
	add I, 1
	set Z, [I]

	jsr FFAT16_getFileByName_popRegs
	set EX, 0
	set PC, POP

:FFAT16_getFileByName_error0
	set B, POP
	jsr POP_REGS
	set EX, 0x0003
	set PC, POP
:FFAT16_getFileByName_error1
	set B, POP
	int INT_FREE
	set B, X
	int INT_FREE
	set B, Y
	int INT_FREE

	jsr FFAT16_getFileByName_popRegs
	set EX, 0x0008
	set PC, POP
:FFAT16_getFileByName_error2
	set B, Z
	int INT_FREE
	set B, X
	int INT_FREE
	set B, Y
	int INT_FREE

	jsr FFAT16_getFileByName_popRegs
	set EX, 0x0006
	set PC, POP

:FFAT16_getFileByName_popRegs
	set [tmpV], POP
	set J, POP
	set I, POP
	set C, POP
	set B, POP
	set A, POP
	set PC, [tmpV]
