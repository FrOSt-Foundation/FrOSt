; --------------
;  FFAT16_newFile
; --------------
; Description:
;     - Creates a new file on the disk.
; Arguments:
;     - B: Size (in sectors) of the file
;     - C: Pointer to the file name
; Returns:
;     - EX: 0 if no error, else error code

:FFAT16_newFile
	set EX, 0
	ife 0, [FFAT16_valid]
		set EX, 1
	ife EX, 1
		set PC, POP
	jsr push_regs
	set X, 1
	jsr dd_readSector

	jsr dd_waitForOperation

	jsr FFAT16_findFirstFreeFATEntry
	ife EX, 0x0007
		set PC, FFAT16_newFile_error

	set PUSH, B

	; X is now the first free entry and Y the first free sector.
	set [X], B
	add X, 1
	set [X], Y
	add X, 1

	jsr FFAT16_formatFileName

	set PUSH, X
	set PUSH, Y
	set PUSH, Z

	; We can now write the Z sector on the FAT, it should be well formed.
	set A, 3
	set X, 1
	set Y, Z

	hwi [id_floppy1]
	ifn B, 1 ; If error
		set PC, FFAT16_newFile_error2
	jsr dd_waitForOperation

	set Z, POP
	set Y, POP
	set X, POP
	set B, POP

	set PUSH, Z
		; We now have to erase the sectors' content
		set I, 0
		:FFAT16_newFile_loop0
			set J, 0
			:FFAT16_newFile_loop1
				set [Z], 0
				add J, 1
				add Z, 1
				ifn J, 512
					set PC, FFAT16_newFile_loop1
			set Z, PEEK
			set PUSH, X
			set PUSH, Y
				set X, Y
				set Y, Z
				jsr dd_writeSector
				jsr dd_waitForOperation
			set Y, POP
			set X, POP
			add Y, 1
			add I, 1
			ifn I, B
				set PC, FFAT16_newFile_loop0
	set B, POP
	int INT_FREE

	jsr pop_regs
	set PC, POP

:FFAT16_newFile_error2
	set B, POP
	set Z, POP
	set Y, POP
	set X, POP
	set B, Z
	set EX, 0x0004
	int INT_FREE
	jsr pop_regs
	set PC, POP
:FFAT16_newFile_mallocError
	set EX, 0x0003
:FFAT16_newFile_error
	jsr pop_regs
	set PC, POP
