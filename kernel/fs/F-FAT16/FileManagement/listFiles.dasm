; ====================
; Error codes
; ------------
; See wiki
; ====================


; ================================
; FFAT16_listFiles
;
; Return
; ------
; EX : Error code
; Y : Nombre de fichiers
; Z : Pointeur vers tableau dynamiquement alloué (=> NE PAS OUBLIER LE FREE !) contenant des strings. On sait qu'on arrive à la fin du tableau quand on est à Z + J * 14. On passe au string suivant tous les 14 chars. À manipuler avec précaution pour éviter les erreurs 0:)
; ================================

:FFAT16_listFiles
	set EX, 0
	ife 0, [FFAT16_valid]
		set EX, 1
	ife EX, 1
		set PC, POP
	set PUSH, A
	set PUSH, B
	set PUSH, C
	set PUSH, I
	set PUSH, J
	set PUSH, X

	set X, 1
	jsr FFAT16_readSector

	jsr FFAT16_waitFinish

	jsr FFAT16_getFilesNumber ;Retourne le nombre de fichiers en en Y.

	ife Y, 0
		set EX, 6
	ife EX, 6
		set PC, FFAT16_listFiles_break0

	set X, Z ;Dorénavant, adresse de la FAT = X, adresse des noms de fichiers = Z
	set PUSH, Z ;On sauvegarde Z car on va faire un second malloc
		;On alloue 14*nombre de fichiers(taille d'un nom de fichier = 14)
		set B, 16
		mul B, Y
		int INT_MALLOC
		 ife Z, MALLOC_ERROR
			set PC, FFAT16_listFiles_mallocError1

		set PUSH, Z ;On le sauvegarde car il va être modifié pendant la loop

		set I, 0
		add X, 2 ;On veut commencer à l'adresse du string, les deux premiers mots étant réservés pour indiquer la taille de fichier et le secteur de début.
		; Ici, on copie les noms de fichiers vers le tableau les contenant.
		; On fait Y tours de boucle (un pour chaque fichier).
		; À chaque tour de boucle, on copie le nom de fichier dans le tableau de strings et on ajoute zéro à ce même tableau.
		;
		; Ici :
		; I = Nombre de tours parcourus
		; X = Adresse FAT décalée de deux
		; Y = Nombre de fichiers
		; Z = Adresse tableau
		:FFAT16_listFiles_loop0
			set C, 14 ;Le nombre de mots pour chaque string
			set B, X
			set A, Z
			jsr memcpy ;On copie quatorze mot depuis X vers Z.
			add X, 16
			add Z, 14
			add I, 1
			ifn I, Y
				set PC, FFAT16_listFiles_loop0
	set Z, POP

	set B, POP ;Était Z mais on optimise un peu, et surtout on veut garder Z intact car il contient l'adresse du tableau.
	int INT_FREE

	:FFAT16_listFiles_break0

	set X, POP
	set J, POP
	set I, POP
	set C, POP
	set B, POP
	set A, POP

	set PC, POP

:FFAT16_listFiles_mallocError1
	set Z, POP
	set B, Z
	int INT_FREE
:FFAT16_listFiles_mallocError
	set EX, 0x0003
:FFAT16_listFiles_error
	set X, POP
	set J, POP
	set I, POP
	set C, POP
	set B, POP
	set A, POP
	set PC, POP
