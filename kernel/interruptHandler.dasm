; --------------
;  init_interruptHandler
; --------------
; Description:
;     - Inits the interupt handler. No registers modified.
; Arguments:
;     -
; Returns:
;     -
:init_interruptHandler
	IAS interrupt_handler
	set push, A

	set A, nCommands
	sub A, int_ptr
	set [n_ptr], A

	ifn [deviceManager_edcs_number], 0
		set A, iacm_str_mode_full
	ifn [deviceManager_edcs_number], 0
		jsr edc_puts

	set A, pop

	set pc , pop

; ============================================
; INTERRUPT HANDLER
;
; Fails in silence if error
; /!\ ASSUMES SP IS CORRECTLY POSITIONNED /!\
;
; msg 0x5000 range is for the clock
; msg 0x6000 range is for the keyboard
; msg 0x7000 range is for the M35FD/M525HD
; msg 0x8000 range is for the IACM
;
; msg 0x0000 INT_MALLOC
; msg 0x0001 INT_FREE
; msg 0x0002 INT_INITMEM
;
; msg 0x1000 INT_DEVICES
;
; msg 0x2000 INT_LAUNCH
;
; msg 0x3000 INT_WAITKEY_BLOCKING
; msg 0x3001 INT_WAITKEY_NONBLOCKING
;
; msg 0x4000 INT_KILL
; ============================================
:interrupt_handler
	set push,A
	shr A,12
	ifg A,[n_ptr]
		set pc,ih_bug
	add A,int_ptr
	set pc,[A]

:ih_bug
	set A,pop
	rfi 1

:ih_ask_k
	set A,pop
	and A,0x000F
	ife A,0
		set pc,ih_ask_bk
	ife A,1
		set pc,ih_ask_nk
	rfi 1

:ih_mem
	set A,pop
	and A,0x000F
	ife A,0
		set pc,ih_malloc
	ife A,1
		set pc,ih_free
	ife A,2
		set pc,ih_clear_memory
	ife A, 3
		set PC, ih_realloc
	rfi 1

:ih_devices
	set A, POP

	set A, SP
	add A, 2 ; INT pushes PC and A to the stack, which we don't care about

	set PC, deviceManager_interrupt

:ih_keyboard
	set A,pop
	set pc,sched_resumeKey
	rfi 0

:ih_malloc
	set A , B
	JSR malloc
	rfi 0

:ih_free
	set A , B
	JSR free
	rfi 0

:ih_clear_memory
	set A , B
	JSR clear_memory
	rfi 0

:ih_clock
	set A,pop
	set A,process
	add A,[current_process]
	ife 0,[currently_running]
		set A,0
	ife A,0
		set pc,schedChanger
	:ih_clock_loop1
		add A,1
		ife A,counter
			set A,process
		ife [A],0
			set pc,ih_clock_loop1
		set [current_process],A
		sub [current_process],process
		set A,[A]
		set pc,schedChanger

:ih_launch
	set A,pop
	;JSR launch
	rfi 0

:ih_floppy
	set A,pop
	;set pc,Scheduler
	rfi 0

:ih_ask_bk
	set pc,sched_blockKey

:ih_ask_nk
	JSR keyboard_getNextPressedKey
	rfi 0

:ih_ask_disk
	rfi 0

:ih_stop
	set A,pop
	set pc,Finisher

:ih_power
	set A, POP
	ife A, 0x9000
		set PC, ih_power_sleep
	ife A, 0x9001
		set PC, ih_power_mode
	rfi 0

	:ih_power_sleep
		set PUSH, A
		set PUSH, B
		set PUSH, Z
		ife [deviceManager_iacms_number], 0
			rfi 0

		ifn [deviceManager_screens_number], 0
			jsr lem1802_getVram
		set PUSH, Z

		set B, 0
		ifn [deviceManager_screens_number], 0
			jsr lem1802_setVram

		set B, 0
		ifn [deviceManager_clocks_number], 0
			jsr clock_setspeed

		jsr iacm_sleep

		set B, 1
		ifn [deviceManager_clocks_number], 0
			jsr clock_setspeed

		set B, POP
		ifn [deviceManager_screens_number], 0
			jsr lem1802_setVram

		set Z, POP
		set B, POP
		set A, POP
		rfi 0
	:ih_power_mode
		set PUSH, A
		set PUSH, B
		set A, [iacm_mode]
		set B, 0
		ife A, 0
			set B, 1
		jsr iacm_setmode
		set [iacm_mode], B

		set A, iacm_str_mode_full
		ife [iacm_mode], 1
			set A, iacm_str_mode_reduced
		jsr edc_puts

		set B, POP
		set A, POP

		rfi 0

:ih_realloc
	set A, B
	set B, C
	jsr realloc

	rfi 0
