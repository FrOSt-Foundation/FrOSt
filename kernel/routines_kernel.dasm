;    This file is part of FrOSt.
;
;    FrOSt is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    FrOSt is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with FrOSt.  If not, see <http://www.gnu.org/licenses/>.
;  

﻿;/!\ ATTENTION, NE FONCTIONNE QU’AVEC L’ALLOCATION MÉMOIRE ET LES ROUTINES ;DE TRAITEMENT DE STRING /!\
; --------------------------------------------
; Title:   Routines
; Author:  Faërie
; Date:    02/05/2012
; Version: 0.9
; --------------------------------------------


set PC,main


:HW_SCREEN dat 0xffff
:VRAM dat 0x0
:BUF_VRAM dat 0x0
:VRAM_END dat 0x0
:HW_KEYB dat 0xffff
:HW_CLOCK dat 0xffff
:COLOR dat 0x2000


:KER_STACK dat 0xffff


:program_table dat 0x0,0x0,0x0
:program_table_SP dat 0x0,0x0,0x0


:main
set A,bufVRAM
jsr set_hw
ife Z,0
        sub PC,1 ;crash the dcpu16 because it could not find the hardware ^^
set [BUF_VRAM],[VRAM] ;save the current VRAM
set A,msg_init_hw
set X,0
set Y,0
jsr printf
set X,30
set A,msg_ok
jsr printf
set A,msg_init_int
set X,0
set Y,1
jsr printf
set A,3
set B,0xbcbc
hwi [HW_KEYB]
set A,0
set B,30
hwi [HW_CLOCK]
set A,2
set B,0xabab
hwi [HW_CLOCK]
ias interrupts ;enabling interrupts
set B,msg_ok
set X,30
INT 0x1
add Y,1
set X,0
set B,msg_init_mem
INT 1
jsr init_memoire
set X,30
set B,msg_ok
INT 1
INT 0x11
ifn B,180
        sub PC,4
INT 0
jsr logo
set B,0x11
INT 0x15
ifn C,1
        sub PC,3
INT 0
INT 0x17
sub PC,1


:l1 dat 0x1000," _____      ___  ____  _",0
:l2 dat 0x1000,"|  ___| __ / _ \/ ___|| |_",0
:l3 dat 0x1000,"| |_ | '__| | | \___ \| __|",0
:l4 dat 0x1000,"|  _|| |  | |_| |___) | |_",0
:l5 dat 0x1000,"|_|  |_|   \___/|____/ \__|",0
:l6 dat 0xf000,"    v0.09c",0
:l7 dat 0xe000,"         French OS teamwork",0
:l8 dat 0x3000,"     Credits: Faerie, Yamakaky, Franck97 et Alocer.",0
:l9 dat 0xf080,"Appuyez sur Enter pour continuer",0
:logo
set X,2
set Y,0
set B,l1
INT 1
set Y,1
set B,l2
INT 1
set Y,2
set B,l3
INT 1
set Y,3
set B,l4
INT 1
set Y,4
set B,l5
INT 1
set Y,5
set B,l6
INT 1
set Y,6
set B,l7
INT 1
set X,0
set Y,8
set B,l8
INT 1
set Y,10
set B,l9
INT 1
set PC,pop


;---------------------------------------------
;MMU look at the program at [A] until B words are verified
;add the offset C to all the adresses in set
;---------------------------------------------
:MMU
set push,A
set push,B
set push,I
set I,B
add I,A
:MMU_loop
set B,[A]
ife B,0x7f81 ;set PC,label
        set PC,MMU_PC
ife B,0x7B81 ;set PC,[label]
	set PC,MMU_PC
ife B,0x7F61 ;set SP,label
	set PC,MMU_PC
ife B,0x7B61 ;set SP,[label]
	set PC,MMU_PC
and B,0x00ff
ife B,0x7b
	set PC,MMU_REG ;command [label],[label]
ife B,0x20 ;jsr
	set PC,MMU_PC
ifg B,0xC1
	ifl B,0xC6
		set PC,MMU_REG2 ;command [label],reg
ife B,0xD2
	set PC,MMU_IFE ;ife
ife B,0x12
	set PC,MMU_IFE
set B,[A]
and B,0xff00
shr B,8
ife B,0x78
	set PC,MMU_REG3 ;command reg,[label]
:MMU_end_loop
add A,1
ifn A,I
	ifn [A],0xDA1A
		ifn [A+1],0xDA1A
			ifn [A+2],0xDA1A
				set PC,MMU_loop
set I,pop
set B,pop
set A,pop
set PC,pop
:MMU_PC
add A,1
add [A],C
set PC,MMU_end_loop
:MMU_REG
set B,[A]
and B,0x00ff
ifl B,0xC1
	set PC,MMU_end_loop
ifg B,0xC6
	set PC,MMU_end_loop
add A,1
add [A],C
add A,1
add [A],C
set PC,MMU_end_loop
:MMU_REG2
add A,1
add [A],C
set PC,MMU_end_loop
:MMU_REG3
set B,[A]
and B,0x000f
ifg B,6
	ifl B,1
		set PC,MMU_end_loop
add A,1
add [A],C
set PC,MMU_end_loop
:MMU_IFE
set B,[A]
ife B,0x7C12
	set PC,MMU_end_loop
add A,1
add [A],C
ife B,0x7BD2
	add A,1
ife B,0x7BD2
	add [A],C
set PC,MMU_end_loop

;-------------------------------------------------
;SCHEDULER 
;save all the regs on the user stack and the stop of the program
;then restore the next program
:scdlrld dat 0x0 ;number of programs currently running
:scdlr dat 0x0   ;id of the program currenty running
:scdlr_tmp dat 0x0 ;temporary value
;-------------------------------------------------
:scheduler
ifl scdlrld,2
        rfi 1
set [scdlr_tmp],pop
set A,pop
set push,Ex
set push,I
set push,J
set push,X
set push,Y
set push,Z
set push,C
set push,B
set push,A
set A,[scdlr]
add A,program_table
set [A],[scdlr_tmp]
set A,[scdlr]
add A,program_table_SP
set [A],SP
;save finished
;change the program currently running
set A,0
ife [scdlr],[scdlrld]
        set A,1
ife [scdlr],[scdlrld]
        set [scdlr],0
ife A,0
        ifn [scdlr],[scdlrld]
                add [scdlr],1
;restore the program
set A,[scdlr]
add A,program_table_SP
set SP,[A]
set A,[scdlr]
add A,program_table
set [scdlr_tmp],[A]
set A,pop
set B,pop
set C,pop
set Z,pop
set Y,pop
set X,pop
set J,pop
set I,pop
set Ex,pop
set push,A
set push,[scdlr_tmp]
rfi 1


;--------------------------------------------------------
;INTERRUPT HANDLER
;msg 0xabab is for the clock
;msg 0xbcbc is for the keyboard
;msg 0x0 clear the screen
;msg 0x1 printf (store the adress of the string in B, print at X,Y)
;msg 0x2 print a character stored in B at X Y
;msg 0x3 print the value stored in B in base C
;msg 0x4 set video mem (store the adress in B)
;msg 0x5 scroll the screen by B lines
;msg 0x11 store number of ticks elapsed since last call in B
;msg 0x15 request a key placed in B (store it in C 1/0)
;msg 0x16 peek at the last key pushed, stored in B
;msg 0x17 clear the keyboard buffer
;msg 0x20 malloc B blocs (return in Z)
;msg 0x21 free bloc B
;--------------------------------------------------------
:interrupts
ife A,0xabab
        set PC,scheduler
ife A,0xbcbc
        set PC,key_int
ife A,0x0
        jsr clear_screen
ife A,0x1
        set PC,ip
ife A,0x2
        set PC,ipc
ife A,0x3
        set PC,id
ife A,0x4
        set PC,ir
ife A,0x5
        set PC,ic
ife A,0x11
        set PC,ic2
ife A,0x15
        set PC,ik1
ife A,0x16
        set PC,ik2
ife A,0x17
        set PC,ik3
ife A,0x20
        set PC,im
ife A,0x21
        set PC,if
rfi 1


:ip
set A,B
jsr printf
rfi 1
:ipc
set A,B
jsr printC
rfi 1
:ir
set A,B
jsr set_VRAM
rfi 1
:ic
set A,B
jsr scroll_screen
rfi 1
:ic2
set A,1
set push,C
hwi [HW_CLOCK]
set B,C
set C,pop
rfi 1
:id
set A,B
set push,B
set B,C
jsr dump
set B,pop
rfi 1
:ik1
set A,2
hwi [HW_KEYB]
rfi 1
:ik2
set A,1
set push,C
hwi [HW_KEYB]
set B,C
set C,pop
rfi 1
:ik3
set A,0
hwi [HW_KEYB]
rfi 1
:im
set A,B
jsr malloc
rfi 1
:if
set A,B
jsr free
rfi 1


;--------------------------------------------------------
;KEY INT is for the keyboard interrupt
;not working for the moment.
;--------------------------------------------------------
:key_int
rfi 1


;--------------------------------------------------------
;SET VRAM adress at A
;--------------------------------------------------------
:set_VRAM
set [VRAM],A
set push,A
add A,384
set [VRAM_END],A
set push,B
set A,0
set B,[VRAM]
hwi [HW_SCREEN]
set B,pop
set A,pop
set PC,pop


;--------------------------------------------------------
;DUMP print the content of A at X,Y on VRAM in base B.
;doesn't modify any of the regs
;--------------------------------------------------------
:dump
set push,I
set I,B
set push,Z
set Z,Y
mul Z,32
add Z,X
add Z,[VRAM]
set push,A
set push,B
set push,J
set J,0
:fr
set B,A
mod B,I
ifg B,9
        add PC,3
add B,48
add PC,2
add B,55
add B,[COLOR]
set push,B
div A,I
add J,1
ifn A,0
        set PC,fr
:fre
set [Z],pop
add Z,1
sub J,1
ifn J,0
        set PC,fre
set J,pop
set B,pop
set A,pop
set Z,pop
set I,pop
set PC,pop


;--------------------------------------------------------
;PRINTF print a formated string on [VRAM], the color is stored
;before the text ; print at X,Y.
;Stop when [A]=0
;scroll the screen if needed
;0x11 -> \n
;0x1f -> \t
;doesn't modify any of the regs.
;--------------------------------------------------------
:printf
set push,A
set push,X
set push,Y
set push,[COLOR]
:de
jsr printSTR
ifg [Z],0x7f
        set [COLOR],[Z]
ife [Z],0x11
        jsr p_return
ife [Z],0x1f
        jsr p_tab
ifn [Z],0
        add Z,1
set A,Z
ifn [Z],0
        set PC,de
set [COLOR],pop
set Y,pop
set X,pop
set A,pop
set PC,pop


:p_return
set X,0
add Y,1
set PC,pop
:p_tab
add X,4
ifg X,32
        add Y,1
ifg X,32
        set X,0
set PC,pop


;--------------------------------------------------------
;PRINTSTR on [VRAM] with [COLOR]
;print a char table. The first char is at [A], stops when
;enconter 0 or if [A]>0x7f or if [A]<0x20.
;
;/!\ print at X Y /!\
;
;scroll the screen if needed
;
;modify X Y to set them one character after the end of the string
;set Z at the end of the string
;doesn't modify any of the others
;--------------------------------------------------------
:printSTR
set push,I
set push,J
set push,A
set I,Y
mul I,32
add I,X ;I is for the screen
add I,[VRAM]
set J,A
set A,1
ifg I,[VRAM_END]
        jsr erer
ife I,[VRAM_END]
        jsr scroll_screen
ife I,[VRAM_END]
        sub I,32
ifg [J],0x7f
        set PC,ere
ifl [J],0x1f
        set PC,ere
:er
add [J],[COLOR]
set [I],[J]
sub [J],[COLOR]
add J,1
add I,1
ife I,[VRAM_END]
        jsr scroll_screen
ife I,[VRAM_END]
        sub I,32
ifl [J],0x7f
        ifg [J],0x1f
            set PC,er
:ere
sub I,[VRAM]
set A,I
mod A,0x20
sub I,A
div I,0x20
set X,A
set Y,I
set A,pop
set Z,J
set J,pop
set I,pop
set PC,pop
:erer
set push,A
set push,J
set push,I
set J,[VRAM_END]
sub I,J
div I,32
set A,I
jsr scroll_screen
set I,pop
mul A,32
sub I,A
set J,pop
set A,pop
set PC,pop


;-----------------------------------------------------
;PRINTC print the char in A on the screen
;at X Y with [COLOR]
;-----------------------------------------------------
:printC
set push,Z
set Z,Y
mul Z,32
add Z,X
add Z,[VRAM]
ifg Z,[VRAM_END]
        set PC,ptc
set push,A
add A,[COLOR]
set [Z],A
set A,pop
:ptc
set Z,pop
set PC,pop


;-----------------------------------------------------
;CLEAR SCREEN on [VRAM]
;-----------------------------------------------------
:clear_screen
set push,I
set push,J
set I,[VRAM]
:qw
sti [I],0
ifn I,[VRAM_END]
    set PC,qw
set J,pop
set I,pop
set PC,pop


;-------------------------------------------------------
;SCROLL SCREEN with A lines (screen 32*12)
;if A>12 then A=12
;doesn't modify any of the regs
;-------------------------------------------------------
:scroll_screen
set push,A
ifg A,12
        set A,12
mul A,32
set push,C
set C,384 ;32*12 cells
sub C,A
add A,[VRAM]
set push,B
set B,[VRAM]
jsr memcpy
set B,[VRAM_END]
sub A,[VRAM]
sub B,A
set push,[VRAM]
set [VRAM],B
jsr clear_screen
set [VRAM],pop
set B,pop
set C,pop
set A,pop
set PC,pop


;-------------------------------------------------------
;MEMCPY
;memcpy, copy from [A] to [B] C words
;doesn't modify any of the regs
;-------------------------------------------------------
:memcpy
set push,I
set push,J
set J,A
set I,B
set push,Z
set Z,A
add Z,C
:aq
sti [I],[J]
ifn J,Z
    set PC,aq
set Z,pop
set J,pop
set I,pop
set PC,pop


;-------------------------------------------------
;LOAD PROGRAM    load a program in the ram at the adress allocated by malloc
;the beginning of the program to load is at [A]
;all the other regs are args for the program loaded
;set a new stack.
;save all the regs
:lotmp dat 0x0
:lotmp2 dat 0x0
;-------------------------------------------------
:load_prog
set push,Z
set push,A
set A,B
add A,768
jsr malloc
ife Z,0
        set PC,ld_end
add Z,3
set A,program_table
sub A,1
add A,1
ifn [A],0
        ifn [A],program_table_SP
                sub PC,5
ife [A],program_table_SP
        set PC,ld_end
add [scdlrld],1
set [A],Z
set [lotmp2],A
set A,pop
set push,C
set push,B
jsr strlen
set B,Z
set Z,pop
set C,B
set B,Z
jsr memcpy
sub Z,1
set [lotmp],[Z]
set Z,pop
set C,pop
set B,pop
jsr push_regs
set [KER_STACK],SP
set SP,[lotmp]
set push,A
set push,C
set A,[lotmp2]
set C,[lotmp2]
jsr MMU
set C,pop
;on donne un autre écran
set B,SP
sub B,512
INT 0x4
set B,pop
set PC,[lotmp2]
:ld_end
set A,pop
set Z,pop
set PC,pop
;-------------------------------------------------
;END PROGRAM     end a program.
;all is restored.
;-------------------------------------------------
:end_prog
set PC,pop


;-------------------------------------------------
;SET HARDWARE doesn't modify any of the regs
;init the clock and the screen and the keyboard
;set VRAM at A
;shut down the clock
;clear the keyboard buffer
;PUT 0 in Z if failed to initialise any of the hw else 1
;-------------------------------------------------
:set_hw
jsr push_regs
hwn Z
:ze
hwq Z
ife B,0x7349
    ife A,0xf615
        set [HW_SCREEN],Z
ife B,0x30cf
    ife A,0x7406
        set [HW_KEYB],Z
ife B,0x12d0
    ife A,0xb402
        set [HW_CLOCK],Z
sub Z,1
ifn EX,0xffff
    set PC,ze
jsr pop_regs
set Z,1
ife [HW_SCREEN],0xffff
        set Z,0
ife [HW_CLOCK],0xffff
        set Z,0
ife [HW_KEYB],0xffff
        set Z,0
ife Z,0
        set PC,pop
jsr set_VRAM
set push,B
set push,A
set A,0
set B,0
hwi [HW_CLOCK]
hwi [HW_KEYB]
set A,pop
set B,pop
set PC,pop


;-------------------------------------------------
;SAVE REGS
:tmpV dat 0x0
;-------------------------------------------------
:push_regs
set [tmpV],pop
set push,Ex
set push,I
set push,J
set push,X
set push,Y
set push,Z
set push,C
set push,B
set push,A
set PC,[tmpV]


;--------------------------------------------------
;RESTORE REGS
;--------------------------------------------------
:pop_regs
set [tmpV],pop
set A,pop
set B,pop
set C,pop
set Z,pop
set Y,pop
set X,pop
set J,pop
set I,pop
set Ex,pop
set PC,[tmpV]




:msg_init_hw dat "Initialisation du materiel",0
:msg_init_int dat "Initialisation des ints",0
:msg_init_mem dat "Initialisation de la memoire",0
:msg_ok dat 0xe000,"OK",0


:bufVRAM dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                        
:end_OS dat 0xFEED ;the end of the OS
