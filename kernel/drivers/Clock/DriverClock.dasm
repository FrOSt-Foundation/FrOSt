; --------------
;  clock_init
; --------------
; Description:
;     - Inits the clock. Used by the hardware manager.
; Arguments:
;     - J: Device ID
;     - (Not used) Y: Device version
;     - Z: Device data location
; Returns:
;     -

:clock_init
	set PUSH,A
	set PUSH,B

	set A, 2 ; Enables interrupts at CLOCK_MESSAGE_RANGE + device ID (each interrupt is unique, though not sequentially from 0)
	set B, INT_CLOCK
	add B, J
	set [Z + 1], B
	hwi [J]

	set A, 0 ; Disable clock ticking.
	set B, 0
	hwi [J]

	set B, POP
	set A, POP
	set PC, POP

; ---------------
;  clock_getTime
; ---------------
; Description:
;     - Get the current clock time.
; Arguments:
;     - J: Device ID
;     - (Not used) Z: Device data location
; Returns:
;     - C: The current clock time.

:clock_getTime
	set PUSH, A

	set A, 1
	hwi [J]

	set A, POP
	set PC, POP

; --------------
;  clock_resetTime
; --------------
; Description:
;     - Resets the clock time.
; Arguments:
;     - J: Device ID
;     - Z: Device data location
; Returns:
;     -

:clock_resetTime
	set PUSH, A
	set PUSH, B

	set B, [Z]
	set A, 0
	hwi [J]

	set B, POP
	set A, POP
	set PC, POP

; ----------------
;  clock_setSpeed
; ----------------
; Description:
;     - Sets the speed of the clock to 60/B ticks per second.
; Arguments:
;     - PUSH: Speed (accessible via [A])
;     - J: Device ID
;     - Z: Device data location
; Returns:
;     -

:clock_setSpeed
	set PUSH, A

	set [Z], [A]
	set A, 0
	hwi [J]

	set A, POP ; Done twice 'cause we need to pop the argument too
	set A, POP
	set PC, POP

; --------------
;  clock_getSpeed
; --------------
; Description:
;     - Gets the clock speed.
; Arguments:
;     - (Not used) J: Device ID
;     - Z: Device data location
; Returns:
;     - B: Clock speed

:clock_getSpeed
	set B, [Z]
	set PC, POP

; --------------
;  clock_getInterruptMessage
; --------------
; Description:
;     - Gets the clock interrupt message.
; Arguments:
;     - (Not used) J: Device ID
;     - Z: Device data location
; Returns:
;     - B: Interrupt message

:clock_getInterrupt
	set B, [Z + 1]
	set PC, POP

; --------------
;  clock_setInterrupt
; --------------
; Description:
;     - Sets the interrupt message for the clock
; Arguments:
;     - PUSH: Interrupt message, or 0 to disable (accessible via [A])
;     - J: Device ID
;     - Z: Device data location
; Returns:
;     -

:clock_setInterrupt
	set PUSH, A

	set A, 2
	hwi [J]

	set [Z + 1], [A]

	set A, POP ; Done twice 'cause we need to pop the argument too
	set A, POP
	set PC, POP
